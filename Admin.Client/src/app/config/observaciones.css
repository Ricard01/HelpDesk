/* 
// =====================================================
// Cosas que arreglar o quitar 
// =====================================================
ng2-slim-loading-bar => ngx spiner se cambio
npm install --save rxjs-compat  => se desinstalo
 npm install ngx-trend  -- graficas https://www.npmjs.com/package/ngx-trend
///////////////////////// ********** START STATUS CODE ********** /////////////////////////  
Success:

return Ok() ← Http status code 200
return Created() ← Http status code 201
return NoContent(); ← Http status code 204

Client Error:

return BadRequest(); ← Http status code 400
return Unauthorized(); ← Http status code 401
return NotFound(); ← Http status code 404
///////////////////////// ********** END STATUS CODE ********** /////////////////////////  

///////////////////////// ********** START T A B L E ********** /////////////////////////  
 @Component({
  selector: 'app-user',
  templateUrl: './user.component.html',
  styles: [
    `
      table {
        width: 100%;
      }

      .mat-form-field {
        font-size: 14px;
        width: 100%;
      }
    `
  ]
})
export class UserComponent implements OnInit, OnDestroy {
  users: User[];
  pageSettings = pageSettings;
  displayedColumns: string[] = ['id', 'username', 'email', 'puesto'];
  // dataSource = new MatTableDataSource(ELEMENT_DATA);

  dataApi = new MatTableDataSource();

  applyFilter(filterValue: string) {
    this.dataApi = new MatTableDataSource();
  }
  constructor(private route: ActivatedRoute, private userService: UserService) {
    this.pageSettings.pageContentFullWidth = true;
  }

  ngOnInit() {

   this.route.data.subscribe(data => {
      this.users = data['users'].result;

    });
    this.dataApi = new MatTableDataSource(this.users);
     console.log( this.dataApi);

  }

  ngOnDestroy() {
    this.pageSettings.pageContentFullWidth = false;
  }
}
///////////////////////// ********** END T A B L E ********** /////////////////////////  


///////////////////////// ********** ELVIS OPERATOR ? ********** /////////////////////////  

if (input >= 0)
{
    classify = "nonnegative";
}
else
{
    classify = "negative";
}

classify = (input >= 0) ? "nonnegative" : "negative";


///////////////////////// ********** END ELVIS OPERATOR ? ********** /////////////////////////  
///////////////////////// ********** SELECT DEPRECATED ********** /////////////////////////  
OPT1
<select formControlName="fcequipo" [(ngModel)]="selectedEquipo" class="col-md-4 custom-select"
                            required>
                            <option [ngValue]="null" > Ninguno </option>
                            <option  *ngFor="let equipo of equipos" [value]="equipo.id"  >
                                {{ equipo.nombreEquipo }}
                            </option>
                        </select>


  setFormValues() {

       this.selectedEquipo = this.equipos.find(i => i.idUser === this.idUsuario);
      this.equipoForm.get('fcequipo2').patchValue(this.selectedEquipo2);

  }


OPT2
 <select [value]="selectedEquipo" (change)="onChangeEquipo($event.target.value)"
                            formControlName="equipo" id="ddOwnerLevel" class="col-md-4 custom-select" required>
                            <option [value]="0" disabled>Selecciona un Equipo</option>
                            <option *ngFor="let equipo of equipos"
                                [ngValue]="equipo.idUser == null ? equipo : equipo ">{{ equipo.nombreEquipo}}
                            </option>
                        </select>
w
  onChangeEquipo(event: any) {
    this.selectedEquipo = this.equipos.find(e => e.nombreEquipo === event.target.value);
    this.setFormValues();
  }

  modelBuilder.Entity<Team>().HasData(
          new Team[] or single new Team
    {
        new Team
        {
            TeamId = 101,
            Name = "Entity Framework",
            TwitterAlias = "efmagicunicorns"
        },
        new Team
        {
            TeamId = 102,
            Name = ".NET",
            TwitterAlias = "dotnet"
        }
    });
*/